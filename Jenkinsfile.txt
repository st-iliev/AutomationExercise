pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                bat 'dotnet restore'
                bat 'dotnet build --configuration Release'
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Start Chrome WebDriver
                    bat 'start chromedriver --port=9515 --url-base=/wd/hub'
                    // Run tests
                    try {
                        bat 'dotnet test "Automation Exercise/AutomationExercise.csproj" --configuration Release'
                    } catch (Exception e) {
                        echo 'Tests failed: ' + e.getMessage()
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Restore and Build Project') {
            steps {
                script {
                    try {
                        // Restore, build, and test the project
                        bat 'dotnet restore "Automation Exercise.sln"'
                        bat 'dotnet build "Automation Exercise.sln" --configuration Release'
                        bat 'dotnet test "Automation Exercise/AutomationExercise.csproj" --configuration Release'
                    } catch (Exception e) {
                        echo 'Restore and Build Project failed: ' + e.getMessage()
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }

    post {
        always {
            // Correctly handle process termination
            script {
                try {
                    bat 'taskkill /F /IM chromedriver.exe /T'
                } catch (Exception e) {
                    echo 'Error during ChromeDriver process termination: ' + e.getMessage()
                }
            }
        }
    }
}

